generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model roles {
  id         Int          @id @default(autoincrement())
  name       String       @unique @db.VarChar(50)
  user_roles user_roles[]
}

model user_roles {
  user_id Int
  role_id Int
  roles   roles @relation(fields: [role_id], references: [id], onUpdate: NoAction)
  users   users @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, role_id])
}

model users {
  id                                                Int                    @id @default(autoincrement())
  emp_fname                                         String                 @map("first_name") @db.VarChar(100)
  emp_mid                                           String?                @map("middle_name") @db.VarChar(100)
  emp_lname                                         String                 @map("last_name") @db.VarChar(100)
  emp_suffix                                        String?                @map("suffix") @db.VarChar(20)
  emp_code                                          String?                @unique @map("employee_id") @db.VarChar(50)
  post_des                                          String?                @map("job_title") @db.VarChar(100)
  emp_email                                         String?                @map("corporate_email") @db.VarChar(150)
  emp_cell                                          String?                @map("corporate_mobile_no") @db.VarChar(20)
  password                                          String
  emp_status                                        String?                @default("active") @map("status") @db.VarChar(20)
  created_at                                        DateTime?              @default(now()) @db.Timestamp(6)
  profile_image                                     String?                @db.VarChar(255)
  department                                        String?
  reportingToId                                     Int?
  departmentHeadId                                  Int?
  isServiceApprover                                 Boolean                @default(false)
  isTechnician                                      Boolean                @default(false)
  description                                       String?
  landline_no                                       String?                @db.VarChar(20)
  local_no                                          String?                @db.VarChar(20)
  requester_view_permission                         String?                @default("own_requests") @db.VarChar(50)
  departmentId                                      Int?
  requiresPasswordChange                            Boolean                @default(false)
  approvalConversations                             ApprovalConversation[] @relation("ApprovalConversations")
  attachments                                       Attachment[]
  departmentsManaged                                Department[]           @relation("DepartmentHeadUser")
  email_templates_email_templates_created_byTousers email_templates[]      @relation("email_templates_created_byTousers")
  email_templates_email_templates_updated_byTousers email_templates[]      @relation("email_templates_updated_byTousers")
  incidentCatalogCreated                            IncidentCatalogItem[]  @relation("IncidentCatalogCreatedBy")
  incidentCatalogUpdated                            IncidentCatalogItem[]  @relation("IncidentCatalogUpdatedBy")
  notifications                                     Notification[]         @relation("UserNotifications")
  report_folders                                    report_folders[]
  reportTemplates                                   ReportTemplate[]       @relation("ReportTemplateCreatedBy")
  requestApprovals                                  RequestApproval[]      @relation("RequestApprovals")
  requestHistory                                    RequestHistory[]       @relation("RequestHistory")
  requests                                          Request[]
  serviceCatalogCreated                             ServiceCatalogItem[]   @relation("ServiceCatalogCreatedBy")
  serviceCatalogUpdated                             ServiceCatalogItem[]   @relation("ServiceCatalogUpdatedBy")
  serviceCategoriesCreated                          ServiceCategory[]      @relation("ServiceCategoryCreatedBy")
  serviceCategoriesUpdated                          ServiceCategory[]      @relation("ServiceCategoryUpdatedBy")
  slaIncidentsCreated                               SLAIncident[]          @relation("SLAIncidentCreatedBy")
  slaIncidentsUpdated                               SLAIncident[]          @relation("SLAIncidentUpdatedBy")
  slaServicesCreated                                SLAService[]           @relation("SLAServiceCreatedBy")
  slaServicesUpdated                                SLAService[]           @relation("SLAServiceUpdatedBy")
  technician                                        Technician?
  templatesCreated                                  Template[]             @relation("TemplateCreatedBy")
  templatesUpdated                                  Template[]             @relation("TemplateUpdatedBy")
  user_roles                                        user_roles[]
  departmentHead                                    users?                 @relation("DepartmentHead", fields: [departmentHeadId], references: [id])
  departmentMembers                                 users[]                @relation("DepartmentHead")
  userDepartment                                    Department?            @relation("DepartmentMembers", fields: [departmentId], references: [id])
  reportingTo                                       users?                 @relation("UserReporting", fields: [reportingToId], references: [id])
  directReports                                     users[]                @relation("UserReporting")
}

model Department {
  id               Int      @id @default(autoincrement())
  name             String   @unique
  description      String?
  departmentHeadId Int?
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  departmentHead   users?   @relation("DepartmentHeadUser", fields: [departmentHeadId], references: [id])
  members          users[]  @relation("DepartmentMembers")

  @@map("departments")
}

model Holiday {
  id          Int      @id @default(autoincrement())
  name        String
  date        DateTime @db.Date
  description String?
  isRecurring Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("holidays")
}

model Skill {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  category         String?
  description      String?
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  technicianSkills TechnicianSkill[]

  @@map("skills")
}

model SupportGroup {
  id                      Int                      @id @default(autoincrement())
  name                    String                   @unique
  description             String?
  isActive                Boolean                  @default(true)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  globalLoadBalanceConfig GlobalLoadBalanceConfig?
  technicianMemberships   TechnicianSupportGroup[]
  templateAssignments     TemplateSupportGroup[]

  @@map("support_groups")
}

model GlobalLoadBalanceConfig {
  id              Int          @id @default(autoincrement())
  supportGroupId  Int          @unique
  isActive        Boolean      @default(true)
  priority        Int          @default(1)
  createdAt       DateTime     @default(now()) @db.Timestamp(6)
  updatedAt       DateTime     @updatedAt
  loadBalanceType String       @default("load_balancing") @db.VarChar(20)
  supportGroup    SupportGroup @relation(fields: [supportGroupId], references: [id], onDelete: Cascade)

  @@map("global_load_balance_config")
}

model Technician {
  id                       Int                      @id @default(autoincrement())
  userId                   Int                      @unique
  displayName              String                   @db.VarChar(200)
  secondaryEmail           String?                  @db.VarChar(150)
  phone                    String?                  @db.VarChar(50)
  mobile                   String?                  @db.VarChar(50)
  smsMailId                String?                  @db.VarChar(150)
  vipUser                  Boolean                  @default(false)
  enableTelephony          Boolean                  @default(false)
  sipUser                  String?                  @db.VarChar(100)
  extensions               String?                  @db.VarChar(100)
  costPerHour              Decimal                  @default(0.00) @db.Decimal(10, 2)
  allowedToViewCostPerHour Boolean                  @default(false)
  serviceRequestApprover   Boolean                  @default(false)
  purchaseApprover         Boolean                  @default(false)
  isAdmin                  Boolean                  @default(false)
  enableLogin              Boolean                  @default(false)
  loginName                String?                  @unique @db.VarChar(100)
  description              String?
  reportingToId            Int?
  status                   String                   @default("active") @db.VarChar(20)
  isActive                 Boolean                  @default(true)
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @updatedAt
  technicianSkills         TechnicianSkill[]
  supportGroupMemberships  TechnicianSupportGroup[]
  reportingTo              Technician?              @relation("TechnicianReporting", fields: [reportingToId], references: [id])
  directReports            Technician[]             @relation("TechnicianReporting")
  user                     users                    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("technicians")
}

model TechnicianSupportGroup {
  id             Int          @id @default(autoincrement())
  technicianId   Int
  supportGroupId Int
  isLead         Boolean      @default(false)
  assignedDate   DateTime     @default(now())
  supportGroup   SupportGroup @relation(fields: [supportGroupId], references: [id], onDelete: Cascade)
  technician     Technician   @relation(fields: [technicianId], references: [id], onDelete: Cascade)

  @@unique([technicianId, supportGroupId])
  @@map("technician_support_groups")
}

model TechnicianSkill {
  id                Int        @id @default(autoincrement())
  technicianId      Int
  skillId           Int
  proficiencyLevel  String     @default("beginner")
  yearsOfExperience Int?
  certifications    String?
  notes             String?
  assignedDate      DateTime   @default(now())
  skill             Skill      @relation(fields: [skillId], references: [id], onDelete: Cascade)
  technician        Technician @relation(fields: [technicianId], references: [id], onDelete: Cascade)

  @@unique([technicianId, skillId])
  @@map("technician_skills")
}

model OperationalHours {
  id                 Int             @id @default(autoincrement())
  organizationId     Int?
  workingTimeType    String          @default("standard")
  standardStartTime  String?         @db.VarChar(5)
  standardEndTime    String?         @db.VarChar(5)
  standardBreakStart String?         @db.VarChar(5)
  standardBreakEnd   String?         @db.VarChar(5)
  isActive           Boolean         @default(true)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  exclusionRules     ExclusionRule[]
  workingDays        WorkingDay[]

  @@map("operational_hours")
}

model WorkingDay {
  id                 Int              @id @default(autoincrement())
  operationalHoursId Int
  dayOfWeek          Int
  isEnabled          Boolean          @default(true)
  scheduleType       String           @default("standard")
  customStartTime    String?          @db.VarChar(5)
  customEndTime      String?          @db.VarChar(5)
  breakHours         BreakHours[]
  operationalHours   OperationalHours @relation(fields: [operationalHoursId], references: [id], onDelete: Cascade)

  @@unique([operationalHoursId, dayOfWeek])
  @@map("working_days")
}

model BreakHours {
  id           Int        @id @default(autoincrement())
  workingDayId Int
  startTime    String     @db.VarChar(5)
  endTime      String     @db.VarChar(5)
  workingDay   WorkingDay @relation(fields: [workingDayId], references: [id], onDelete: Cascade)

  @@map("break_hours")
}

model ExclusionRule {
  id                 Int              @id @default(autoincrement())
  operationalHoursId Int
  excludeOn          String           @db.VarChar(50)
  weekSelection      String?          @db.VarChar(50)
  monthSelection     String           @db.VarChar(50)
  operationalHours   OperationalHours @relation(fields: [operationalHoursId], references: [id], onDelete: Cascade)

  @@map("exclusion_rules")
}

model SLAService {
  id                Int                    @id @default(autoincrement())
  name              String                 @db.VarChar(255)
  description       String?
  priority          String                 @db.VarChar(20)
  category          String?                @db.VarChar(100)
  responseTime      Int
  operationalHours  Boolean                @default(true)
  autoEscalate      Boolean                @default(false)
  escalationTime    Int
  status            String                 @default("active") @db.VarChar(20)
  createdAt         DateTime               @default(now()) @db.Timestamp(6)
  updatedAt         DateTime               @updatedAt @db.Timestamp(6)
  createdBy         Int?
  updatedBy         Int?
  matchCriteria     String                 @default("ALL") @db.VarChar(20)
  excludeHolidays   Boolean                @default(true)
  excludeWeekends   Boolean                @default(false)
  resolutionDays    Int?                   @default(0) @map("resolution_days")
  resolutionHours   Int?                   @default(8) @map("resolution_hours")
  resolutionMinutes Int?                   @default(0) @map("resolution_minutes")
  creator           users?                 @relation("SLAServiceCreatedBy", fields: [createdBy], references: [id])
  updater           users?                 @relation("SLAServiceUpdatedBy", fields: [updatedBy], references: [id])
  escalationLevels  SLAServiceEscalation[]
  templates         Template[]

  @@map("sla_service")
}

model SLAServiceEscalation {
  id              Int        @id @default(autoincrement())
  slaServiceId    Int
  level           Int
  timeToEscalate  Int
  escalationGroup String     @db.VarChar(255)
  enabled         Boolean    @default(true)
  timing          String?    @db.VarChar(100)
  escalateType    String?    @db.VarChar(20)
  escalateTo      String?
  slaService      SLAService @relation(fields: [slaServiceId], references: [id], onDelete: Cascade)

  @@unique([slaServiceId, level])
  @@map("sla_service_escalation")
}

model SLAIncident {
  id                          Int           @id @default(autoincrement())
  name                        String        @db.VarChar(255)
  description                 String?
  priority                    Priority      @default(Medium)
  resolutionDays              Int           @default(0)
  resolutionHours             Int           @default(8)
  resolutionMinutes           Int           @default(0)
  responseDays                Int           @default(0)
  responseHours               Int           @default(2)
  responseMinutes             Int           @default(0)
  operationalHoursEnabled     Boolean       @default(false)
  excludeHolidays             Boolean       @default(false)
  excludeWeekends             Boolean       @default(false)
  responseEscalationEnabled   Boolean       @default(false)
  responseEscalationPriority  Priority?
  resolutionEscalationEnabled Boolean       @default(false)
  escalateTo                  Json?
  escalateType                String?       @db.VarChar(20)
  escalateDays                Int           @default(0)
  escalateHours               Int           @default(0)
  escalateMinutes             Int           @default(0)
  level2Enabled               Boolean       @default(false)
  level2EscalateTo            Json?
  level2Days                  Int           @default(0)
  level2Hours                 Int           @default(0)
  level2Minutes               Int           @default(0)
  level3Enabled               Boolean       @default(false)
  level3EscalateTo            Json?
  level3Days                  Int           @default(0)
  level3Hours                 Int           @default(0)
  level3Minutes               Int           @default(0)
  level4Enabled               Boolean       @default(false)
  level4EscalateTo            Json?
  level4Days                  Int           @default(0)
  level4Hours                 Int           @default(0)
  level4Minutes               Int           @default(0)
  status                      String        @default("active") @db.VarChar(20)
  createdAt                   DateTime      @default(now()) @db.Timestamp(6)
  updatedAt                   DateTime      @updatedAt @db.Timestamp(6)
  createdBy                   Int?
  updatedBy                   Int?
  matchCriteria               String        @default("all") @db.VarChar(20)
  priorityMappings            PrioritySLA[]
  creator                     users?        @relation("SLAIncidentCreatedBy", fields: [createdBy], references: [id])
  updater                     users?        @relation("SLAIncidentUpdatedBy", fields: [updatedBy], references: [id])

  @@map("sla_incident")
}

model TemplateSupportGroup {
  id              Int          @id @default(autoincrement())
  templateId      Int
  supportGroupId  Int
  isActive        Boolean      @default(true)
  priority        Int          @default(1)
  createdAt       DateTime     @default(now()) @db.Timestamp(6)
  loadBalanceType String       @default("round_robin") @db.VarChar(20)
  supportGroup    SupportGroup @relation(fields: [supportGroupId], references: [id], onDelete: Cascade)
  template        Template     @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([templateId, supportGroupId])
  @@map("template_support_group")
}

model Template {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @db.VarChar(255)
  description          String?
  type                 String                 @db.VarChar(20)
  categoryId           Int?
  icon                 String?
  fields               Json
  approvalWorkflow     Json?
  slaServiceId         Int?
  isActive             Boolean                @default(true)
  createdAt            DateTime               @default(now()) @db.Timestamp(6)
  updatedAt            DateTime               @updatedAt @db.Timestamp(6)
  createdBy            Int?
  updatedBy            Int?
  incidentCatalogItems IncidentCatalogItem[]  @relation("IncidentTemplate")
  serviceCatalogItems  ServiceCatalogItem[]   @relation("ServiceTemplate")
  category             ServiceCategory?       @relation("TemplateCategory", fields: [categoryId], references: [id])
  creator              users?                 @relation("TemplateCreatedBy", fields: [createdBy], references: [id])
  slaService           SLAService?            @relation(fields: [slaServiceId], references: [id])
  updater              users?                 @relation("TemplateUpdatedBy", fields: [updatedBy], references: [id])
  supportGroups        TemplateSupportGroup[]

  @@map("template")
}

model PrioritySLA {
  id            Int         @id @default(autoincrement())
  priority      String      @unique @db.VarChar(20)
  slaIncidentId Int
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now()) @db.Timestamp(6)
  updatedAt     DateTime    @updatedAt @db.Timestamp(6)
  slaIncident   SLAIncident @relation(fields: [slaIncidentId], references: [id], onDelete: Cascade)

  @@map("priority_sla")
}

model ServiceCategory {
  id                   Int                   @id @default(autoincrement())
  name                 String                @db.VarChar(100)
  description          String?
  icon                 String?               @db.VarChar(255)
  isActive             Boolean               @default(true)
  serviceCount         Int                   @default(0)
  createdAt            DateTime              @default(now()) @db.Timestamp(6)
  updatedAt            DateTime              @updatedAt @db.Timestamp(6)
  createdBy            Int?
  updatedBy            Int?
  incidentCatalogItems IncidentCatalogItem[]
  serviceCatalogItems  ServiceCatalogItem[]
  creator              users?                @relation("ServiceCategoryCreatedBy", fields: [createdBy], references: [id])
  updater              users?                @relation("ServiceCategoryUpdatedBy", fields: [updatedBy], references: [id])
  templates            Template[]            @relation("TemplateCategory")

  @@map("service_category")
}

model ServiceCatalogItem {
  id           Int             @id @default(autoincrement())
  name         String          @db.VarChar(255)
  description  String?
  categoryId   Int
  templateId   Int?
  isActive     Boolean         @default(true)
  requestCount Int             @default(0)
  createdAt    DateTime        @default(now()) @db.Timestamp(6)
  updatedAt    DateTime        @updatedAt @db.Timestamp(6)
  createdBy    Int?
  updatedBy    Int?
  category     ServiceCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  creator      users?          @relation("ServiceCatalogCreatedBy", fields: [createdBy], references: [id])
  template     Template?       @relation("ServiceTemplate", fields: [templateId], references: [id])
  updater      users?          @relation("ServiceCatalogUpdatedBy", fields: [updatedBy], references: [id])

  @@map("service_catalog_item")
}

model Request {
  id              Int               @id @default(autoincrement())
  templateId      String
  userId          Int
  formData        Json
  attachments     String[]
  createdAt       DateTime
  updatedAt       DateTime
  status          RequestStatus     @default(for_approval)
  attachmentFiles Attachment[]
  approvals       RequestApproval[]
  history         RequestHistory[]
  user            users             @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([templateId])
  @@index([status])
  @@map("requests")
}

model RequestApproval {
  id             Int                    @id @default(autoincrement())
  requestId      Int
  level          Int
  name           String                 @db.VarChar(100)
  approverId     Int?
  approverName   String?                @db.VarChar(200)
  approverEmail  String?                @db.VarChar(200)
  sentOn         DateTime?
  actedOn        DateTime?
  comments       String?
  isAutoApproval Boolean                @default(false)
  createdAt      DateTime
  updatedAt      DateTime               @updatedAt
  status         ApprovalStatus         @default(pending_approval)
  conversations  ApprovalConversation[]
  approver       users?                 @relation("RequestApprovals", fields: [approverId], references: [id])
  request        Request                @relation(fields: [requestId], references: [id], onDelete: Cascade)

  @@index([requestId])
  @@index([approverId])
  @@index([status])
  @@map("request_approvals")
}

model ApprovalConversation {
  id         String          @id @default(cuid())
  approvalId Int
  authorId   Int
  type       String          @default("user") @db.VarChar(50)
  message    String
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  isRead     Boolean         @default(false)
  readBy     Json?
  approval   RequestApproval @relation(fields: [approvalId], references: [id], onDelete: Cascade)
  author     users           @relation("ApprovalConversations", fields: [authorId], references: [id])

  @@index([approvalId])
  @@index([authorId])
  @@index([createdAt])
  @@map("approval_conversations")
}

model RequestHistory {
  id        Int      @id @default(autoincrement())
  requestId Int
  action    String   @db.VarChar(200)
  details   String?
  actorId   Int?
  actorName String   @db.VarChar(200)
  actorType String   @default("user") @db.VarChar(50)
  metadata  Json?
  timestamp DateTime @default(now())
  actor     users?   @relation("RequestHistory", fields: [actorId], references: [id])
  request   Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)

  @@index([requestId])
  @@index([actorId])
  @@index([timestamp])
  @@map("request_history")
}

model Attachment {
  id           String   @id @default(cuid())
  fileName     String
  originalName String
  mimeType     String
  size         Int
  updatedAt    DateTime @updatedAt
  fileContent  Bytes
  createdAt    DateTime @default(now())
  requestId    Int?
  userId       Int
  request      Request? @relation(fields: [requestId], references: [id], onDelete: Cascade)
  user         users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([requestId])
  @@index([userId])
  @@index([fileName])
  @@map("attachments")
}

model IncidentCatalogItem {
  id          Int             @id @default(autoincrement())
  name        String          @db.VarChar(255)
  description String?
  categoryId  Int
  templateId  Int?
  priority    Priority        @default(Medium)
  isActive    Boolean         @default(true)
  usageCount  Int             @default(0)
  createdAt   DateTime        @default(now()) @db.Timestamp(6)
  updatedAt   DateTime        @updatedAt @db.Timestamp(6)
  createdBy   Int?
  updatedBy   Int?
  category    ServiceCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  creator     users?          @relation("IncidentCatalogCreatedBy", fields: [createdBy], references: [id])
  template    Template?       @relation("IncidentTemplate", fields: [templateId], references: [id])
  updater     users?          @relation("IncidentCatalogUpdatedBy", fields: [updatedBy], references: [id])

  @@map("incident_catalog_item")
}

model Notification {
  id        String           @id @default(cuid())
  userId    Int
  type      NotificationType
  title     String
  message   String
  data      Json?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      users            @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

model EmailConfig {
  id              Int       @id @default(autoincrement())
  serverName      String    @map("server_name") @db.VarChar(255)
  alternateServer String?   @map("alternate_server") @db.VarChar(255)
  port            Int
  protocol        String?   @default("SMTP") @db.VarChar(50)
  senderName      String    @map("sender_name") @db.VarChar(255)
  replyTo         String    @map("reply_to") @db.VarChar(255)
  username        String?   @db.VarChar(255)
  password        String?   @db.VarChar(255)
  isActive        Boolean?  @default(true) @map("is_active")
  createdAt       DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("email_config")
}

model email_configuration {
  id               Int       @id @default(autoincrement())
  server_name      String    @db.VarChar(255)
  alternate_server String?   @db.VarChar(255)
  port             Int       @default(587)
  protocol         String    @default("SMTP") @db.VarChar(50)
  sender_name      String    @db.VarChar(255)
  reply_to         String    @db.VarChar(255)
  username         String?   @db.VarChar(255)
  password         String?   @db.VarChar(255)
  is_active        Boolean?  @default(true)
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  updated_at       DateTime? @default(now()) @db.Timestamp(6)
}

model EmailTemplateVariables {
  id           Int       @id @default(autoincrement())
  variableKey  String    @unique @map("variable_key") @db.VarChar(100)
  displayName  String    @map("display_name") @db.VarChar(255)
  description  String?   @default("")
  category     String?   @default("General") @db.VarChar(50)
  defaultValue String?   @default("") @map("default_value")
  exampleValue String?   @default("") @map("example_value")
  isActive     Boolean?  @default(true) @map("is_active")
  createdAt    DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime? @default(now()) @map("updated_at") @db.Timestamp(6)

  @@index([isActive], map: "idx_email_template_variables_active")
  @@index([category], map: "idx_email_template_variables_category")
  @@index([variableKey], map: "idx_email_template_variables_key")
  @@map("email_template_variables")
}

model email_templates {
  id                                      Int       @id @default(autoincrement())
  template_key                            String    @unique @db.VarChar(100)
  title                                   String    @db.VarChar(255)
  description                             String?   @default("")
  subject                                 String    @db.VarChar(500)
  header_html                             String?   @default("")
  content_html                            String
  footer_html                             String?   @default("")
  to_field                                String?   @default("") @db.VarChar(500)
  cc_field                                String?   @default("") @db.VarChar(500)
  bcc_field                               String?   @default("") @db.VarChar(500)
  is_active                               Boolean?  @default(true)
  created_at                              DateTime? @default(now()) @db.Timestamp(6)
  updated_at                              DateTime? @default(now()) @db.Timestamp(6)
  created_by                              Int?
  updated_by                              Int?
  users_email_templates_created_byTousers users?    @relation("email_templates_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_email_templates_updated_byTousers users?    @relation("email_templates_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([is_active], map: "idx_email_templates_active")
  @@index([template_key], map: "idx_email_templates_key")
  @@map("email_templates")
}

model ReportTemplate {
  id             Int             @id @default(autoincrement())
  name           String          @db.VarChar(255)
  description    String?
  selectedFields String[]
  filters        Json?
  createdBy      Int
  isShared       Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  folder_id      Int?
  report_type    String?         @default("template") @db.VarChar(255)
  creator        users           @relation("ReportTemplateCreatedBy", fields: [createdBy], references: [id], onDelete: Cascade)
  report_folders report_folders? @relation(fields: [folder_id], references: [id])

  @@index([createdBy])
  @@index([isShared])
  @@map("report_templates")
}

model report_folders {
  id                   Int              @id @default(autoincrement())
  name                 String           @db.VarChar(255)
  description          String?
  parent_id            Int?
  created_by           Int
  is_shared            Boolean          @default(false)
  created_at           DateTime         @default(now())
  updated_at           DateTime         @default(now())
  users                users            @relation(fields: [created_by], references: [id], onDelete: Cascade)
  report_folders       report_folders?  @relation("report_foldersToreport_folders", fields: [parent_id], references: [id], onDelete: Cascade)
  other_report_folders report_folders[] @relation("report_foldersToreport_folders")
  report_templates     ReportTemplate[]

  @@index([created_by])
  @@index([is_shared])
  @@index([parent_id])
}

enum Priority {
  Low
  Medium
  High
  Top
}

enum ApprovalStatus {
  pending_approval
  for_clarification
  rejected
  approved
}

enum RequestStatus {
  for_approval
  cancelled
  open
  on_hold
  resolved
  closed
}

enum NotificationType {
  REQUEST_CREATED
  REQUEST_APPROVED
  REQUEST_REJECTED
  REQUEST_ASSIGNED
  REQUEST_RESOLVED
  REQUEST_CLOSED
  APPROVAL_REQUIRED
  CLARIFICATION_REQUIRED
  SLA_WARNING
  SLA_ESCALATION
}
